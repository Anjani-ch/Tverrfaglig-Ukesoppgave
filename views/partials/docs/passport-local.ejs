<div id="passport-local" class="col s12 l9 doc-section">
    <div>
    <h4>Installation</h4>

    <p>This strategy allows username and password authentication. This can be integrated with any application or framework that supports Connect-style middleware, for-example with Express.</p>

    <div class="terminal">
    <p class="text-light">$ npm install passport passport-local</p>
    </div>
    </div>

    <div>
    <h4>Implementation</h4>

    <h5>First we will look at our main server file</h5>
    <p>Now we will look into how we can implement this strategy. This example will show how to use Passport JS with connect-flash and express-session. Also assumming that we are using MongoDB database.</p>

    <%- include('./passport-local/implementation.ejs') %>

    <br>

    <h4>LocalStrategy()</h4>
    <p>The LocalStrategy() expects to find credentials in parameters named username and password. If your site prefers to name these fields differently, options are available to change the defaults.</p>

    <%- include('./passport-local/localStrategy-params.ejs') %>

    <p>If you dont't want to use session that Passport JS provides, then you can safely disable it by setting session to false.</p>

    <p>The verify callback can be supplied with the request object by setting the passReqToCallback option to true, and it will autmatically change the callback arguments order.</p>

    <%- include('./passport-local/localStrategy-request.ejs') %>
    
    <br>

    <h4>done()</h4>
    <p>The done() function is called after the validation is complete. It is provided by Passport JS and takes in three arguments. It takes in error, user, and options. If you call done with the user then Passport JS will make the user available on the req object by accessing req.user. Options could for example be a message an error message that will be saved as error if you have implemented session.</p>

    <br>

    <h4>passport.serializeUser()</h4>
    <p>The serializeUser() function takes in a user and a done() function. Here you save the user or some user data in session so that you can access the user later on the req object.</p>

    <br>

    <h4>passport.deserializeUser()</h4>
    <p>The deserializeUser() function takes the data we stored in session and a done() function. Here you can use the data stored in session and call done() with the user that you got. If you have an error you can handle that error in the done() function aswell. </p>

    <br>

    <h5>Now we will look at a configuration for the strategy. </h5>
    <p>This is how passport will authenticate, and handle errors.</p>

    <%- include('./passport-local/configuration.ejs') %>

    <br>

    <h4>Authenticate Request</h4>
    <p>Use the passport.authenticate(), and specify 'local' as the authentication request as the login route handler. You can also pass additional options such as failureRedirect and failureFlash.</p>

    <%- include('./passport-local/authenticate.ejs') %>

    <br>

    <h4>Middleware</h4>

    <p>Thanks to passport we can create middleware to protect routes from non-authenticated users. Passport JS provides an isAuthenticated() method on the request object. This methods returns a boolean based on if the user is authenticated.</p>
    
    <%- include('./passport-local/middleware-func.ejs') %>

    <p>We can then import that middleware and add it to our route. If the user is authenticated the user will be sent to the protected page, but if the are not authenticated then they will be redirected to the index page.</p>

    <%- include('./passport-local/middleware-route.ejs') %>
    </div>
</div>
