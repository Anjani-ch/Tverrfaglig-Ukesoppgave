<section>
    <h3>Password security</h3>
    <p>The above examples uses bcryptjs to hash passwords stored in the database. You can find the documentation <a target="_blank" href="https://www.npmjs.com/package/bcryptjs">here</a>, but we will go through at least the basics.</p>

    <h4>Hashing</h4>
    <p>Password hashing is when you put a password through a hashing algorithm such as bcryptjs to turn the plaintext representation of the password into a series of numbers, letters and symbols. In the event that you experience a security breach, the hash would be of no use to a common theif. As a result you limit the amount of people that can be a threat and even if they got a hold of your hash, they would have a difficult time cracking it.</p>

    <h4>Salting</h4>
    <p>Password hashing is important when securing password in the database, but it does not protect from multiple users having the same password. If multiple users have the same passwords, and you manage to get the password fro one of them, then all those users would be compromised. This is because passwords are hashed in a consisten way, and hashes can be beaten by things like dictionary attacks. The way we takle this is by "salting" our passwords.</p>

    <p>Salting a password i adding a random series of characters to a password before you hash it. This makes it so that every hash is different because every salt is unique even if the plaintext password is the same. This way you can more safely store same passwords in your database.</p>
</section>